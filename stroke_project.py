# -*- coding: utf-8 -*-
"""Copy of stroke project data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u5WGqNZP7ZRV4lqptB6_M7NzhjkDDCNM

#**libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics
from imblearn.over_sampling import SMOTE
from imblearn.over_sampling import RandomOverSampler
from sklearn.neighbors import KNeighborsClassifier
#read data
df = pd.read_csv("/healthcare-dataset-stroke-data.csv")

from google.colab import drive
drive.mount('/content/drive')

df.info()
df.head()

"""# **Data cleaning**

## **check for nulls**
"""

#check nulls
print(df.isna().sum())

"""## **remove nulls**"""

#fill nulls with mean
bmi_mean = df['bmi'].mean()
df['bmi'].fillna(bmi_mean,inplace = True)
print(df.isna().sum())
df.info()

"""## **Check for duplication**"""

#check duplicated
print("duplicate count: ",df.duplicated().sum())

"""# **Data exploration**

## **Summary statistics**

### **statistics  on Age**
"""

#Stats on Age
age_mean = df['age'].mean()
print("age mean = ",age_mean)
age_median = df['age'].median()
print("age median = ",age_median)
age_mode = df['age'].mode()
print("age mode = ",age_mode)
age_std = df['age'].std()
print("age std = ",age_std)
age_var = df['age'].var()
print("age variance = ",age_var)
age_iqr = df['age'].describe()['75%'] - df['age'].describe()['25%']
print("age IQR = ",age_iqr)

"""### **statistics  on BMI**"""

#Stats on BMI
bmi_mean = df['bmi'].mean()
print("bmi mean = ",bmi_mean)
bmi_median = df['bmi'].median()
print("bmi median = ",bmi_median)
bmi_mode = df['bmi'].mode()
print("bmi mode = ",bmi_mode)
bmi_std = df['bmi'].std()
print("bmi std = ",bmi_std)
bmi_var = df['bmi'].var()
print("bmi variance = ",bmi_var)
bmi_iqr = df['bmi'].describe()['75%'] - df['bmi'].describe()['25%']
print("bmi IQR = ",bmi_iqr)

"""### **statistics  on avg_glucose_level**"""

#Stats on avg_glucose_level
bmi_mean = df['avg_glucose_level'].mean()
print("avg_glucose_level mean = ",bmi_mean)
bmi_median = df['avg_glucose_level'].median()
print("avg_glucose_level median = ",bmi_median)
bmi_mode = df['avg_glucose_level'].mode()
print("avg_glucose_level mode = ",bmi_mode)
bmi_std = df['avg_glucose_level'].std()
print("avg_glucose_level std = ",bmi_std)
bmi_var = df['avg_glucose_level'].var()
print("avg_glucose_level variance = ",bmi_var)
bmi_iqr = df['avg_glucose_level'].describe()['75%'] - df['bmi'].describe()['25%']
print("avg_glucose_level IQR = ",bmi_iqr)

"""Function to replace outlairs with medain

"""

def replace_outliers_with_median(column):
    # Calculate the IQR for the column
    Q1 = column.quantile(0.25)
    Q3 = column.quantile(0.75)
    IQR = Q3 - Q1

    # Detect the outliers for the column
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    median = column.median()

    for index, value in column.items():
        if value < lower_bound or value > upper_bound:
            column.at[index] = median

    return column

"""# **visualization**

## **Age**
"""

#Visiualizition
plt.hist(df.age,bins=10,color='red')
plt.xlabel("X-axis")
plt.ylabel("y-axis")
plt.title('Age')
plt.show()

plt.boxplot(df.age,notch=True,vert=False)
plt.title('Age')
plt.show()

stroke_df = df[df['stroke'] == 1]
underage_df = stroke_df[stroke_df['age'] <= 18]
adult_df = stroke_df[stroke_df['age']>18]
adult_df = adult_df[adult_df['age']<50]
old_df = stroke_df[stroke_df['age']>50]

old_df = old_df[old_df['age']<70]
very_old_df = stroke_df[stroke_df['age']>70]

age_categories = np.array([len(underage_df),len(adult_df), len(old_df), len(very_old_df)])
mylabels = ["underage","adult","old","very old"]

plt.pie(age_categories, labels = mylabels, explode=[0.1,0.1,0.1,0.1])
plt.title('age_categories')
plt.show()

ages = pd.DataFrame({
    'ages':[len(underage_df),len(adult_df),len(old_df),len(very_old_df)]
},index = [18,40,60,80])
ages.plot.line()
plt.title('ages')
plt.show()

"""## **BMI**"""

plt.boxplot(df.bmi,notch=True,vert=False)
plt.title('BMI')
plt.show()

"""remove outlairs and revisualize

"""

df.bmi = replace_outliers_with_median(df.bmi)
df.bmi = replace_outliers_with_median(df.bmi)
df.bmi = replace_outliers_with_median(df.bmi)
df.bmi = replace_outliers_with_median(df.bmi)
plt.boxplot(df.bmi,notch=True,vert=False)
plt.title('BMI Without outliars')
plt.show()

plt.boxplot(df.avg_glucose_level,notch=True,vert=False)
plt.title('avg_glucose_level')
plt.show()

"""after replace outlairs"""

df.avg_glucose_level = replace_outliers_with_median(df.avg_glucose_level)
df.avg_glucose_level = replace_outliers_with_median(df.avg_glucose_level)
df.avg_glucose_level = replace_outliers_with_median(df.avg_glucose_level)
df.avg_glucose_level = replace_outliers_with_median(df.avg_glucose_level)
df.avg_glucose_level = replace_outliers_with_median(df.avg_glucose_level)
plt.boxplot(df.avg_glucose_level,notch=True,vert=False)
plt.title('avg_glucose_level')
plt.show()

plt.hist(df.bmi,bins=10,color='blue')
plt.xlabel("X-axis")
plt.ylabel("y-axis")
plt.title('BMI')
plt.show()

"""## **smoking_status**"""

stroke_df.groupby('smoking_status').size().plot(kind='pie', autopct="%.2f")
plt.title('smoking_status')
plt.show()

"""## **work_type**

"""

stroke_df.groupby('work_type').size().plot(kind='pie', autopct="%.2f", explode=[.1,.1,.1,.1])
plt.title('work_type')
plt.show()

"""## **hypertension**

"""

stroke_df.groupby('hypertension').size().plot(kind='pie', autopct="%.2f")
plt.title('hypertension')
plt.show()

"""## **heart_disease**

"""

stroke_df.groupby('heart_disease').size().plot(kind='pie', autopct="%.2f")
plt.title('heart_disease')
plt.show()

"""## **ever_married**

"""

stroke_df.groupby('ever_married').size().plot(kind='pie', autopct="%.2f")
plt.title('ever_married')
plt.show()

"""## **age vs bmi**

"""

plt.scatter(stroke_df['age'],stroke_df['bmi'])
plt.title('age vs bmi')
plt.xlabel("age")
plt.ylabel("bmi")
plt.show()

"""## **avg_glucose_level**

"""

sns.distplot(stroke_df['avg_glucose_level'],
             kde_kws = {'shade':True},
             color = 'red',
            hist=False)
plt.title('avg_glucose_level')
plt.show()

"""## **Residence_type**

"""

#youssef
Stroked_df=df[df['stroke']==1]
row_count=Stroked_df.shape[0]
labels=['Urban','Rural']
percentage=[(Stroked_df['Residence_type'].value_counts()[1]/row_count)*100,(Stroked_df['Residence_type'].value_counts()[0]/row_count)*100]

plt.pie(percentage,labels=labels,autopct='%1.1f%%')
plt.title('Residence_type')
plt.show()

"""## **Remove punctions**

# **Data transformation**
"""

# Changing categorical data to numeric data for model
df['gender'] = df['gender'].replace({"Male":1 , "Female":0})
df['ever_married'] = df['ever_married'].replace({"Yes":1 , "No":0})
df['Residence_type'] = df['Residence_type'].replace({"Urban":1 , "Rural":0})
df['work_type'] = LabelEncoder().fit_transform(df['work_type'])
df['smoking_status'] = LabelEncoder().fit_transform(df['smoking_status'])
# Changing gender from object to bool to fit in model
df['gender'] = df['gender'].astype(bool)

df.info()

print(df.head())

"""#split data to train and test"""

# Split data
y = df['stroke']
X = df.iloc[:, 1:11]

# Normalize the data using MinMaxScaler
scaler = MinMaxScaler()
X = scaler.fit_transform(X)

# Perform oversampling
smote = SMOTE(random_state=0)
X_resampled, y_resampled = smote.fit_resample(X, y)

# Split resampled data
x_train, x_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.3, random_state=0)
# Split original data
x_train2, x_test2, y_train2, y_test2 = train_test_split(X, y, test_size=0.3, random_state=0)

"""# **Classification**

## **Classify With LogisticRegression**
"""

# train a LogisticRegression classifier
lr = LogisticRegression()
lr.fit(x_train2, y_train2)
# predict
y_pred = lr.predict(x_test2)
accuracy_lr = metrics.accuracy_score(y_test2, y_pred)
print("Accuracy of LogisticRegression:", accuracy_lr)

"""## **Classify With KNN**
[link text](https://)
"""

# train a KNN classifier
knn = KNeighborsClassifier()
knn.fit(x_train2, y_train2)
# predict
y_pred_knn = knn.predict(x_test2)
accuracy_knn = metrics.accuracy_score(y_test2, y_pred_knn)
print("Accuracy of knn:", accuracy_knn)

"""## **Classify With with D-tree**"""

# fit data in DecisionTree
tree = DecisionTreeClassifier(random_state=0)
tree.fit(x_train, y_train)
tree_pred = tree.predict(x_test)
accuracy_tree = metrics.accuracy_score(y_test, tree_pred)
print("Accuracy of DecisionTree:", accuracy_tree)

"""## **Classify With  Gradient Boosting**

> Indented block


"""

# fit data in naive_bayes
gb = GradientBoostingClassifier(random_state=0)
gb.fit(x_train, y_train)
gb_pred = gb.predict(x_test)
accuracy_gb = metrics.accuracy_score(y_test, gb_pred)
print("Accuracy of Gradient Boosting:", accuracy_gb)

"""## **Classify With  Random Forest**"""

# fit data in Random Forest
clf =  RandomForestClassifier(random_state=0)
clf.fit(x_train,y_train)
pred = clf.predict(x_test)
acc = metrics.accuracy_score(y_test, pred)
print("Accuracy of Random Forest:", acc)

"""## **Classify With  AdaBoost **"""

# fit data in Ada Boost
ada =  AdaBoostClassifier(random_state=0)
ada.fit(x_train,y_train)
pred_ada = ada.predict(x_test)
acc_ada = metrics.accuracy_score(y_test, pred_ada)
print("Accuracy of Ada Boost:", acc_ada)